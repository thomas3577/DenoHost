<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
    <IsPackable>false</IsPackable>
  </PropertyGroup>

  <PropertyGroup>
    <RuntimeIdentifiers>linux-arm64;linux-x64;osx-arm64;osx-x64;win-x64</RuntimeIdentifiers>
    <RuntimeIdentifier Condition="'$(RuntimeIdentifier)'==''">win-x64</RuntimeIdentifier>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="coverlet.collector" Version="6.0.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="coverlet.msbuild" Version="6.0.4">
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
      <PrivateAssets>all</PrivateAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.NET.Test.Sdk" Version="17.14.1" />
    <PackageReference Include="NJsonSchema" Version="11.4.0" />
    <PackageReference Include="xunit" Version="2.9.3" />
    <PackageReference Include="xunit.runner.visualstudio" Version="3.1.4">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup>
    <ProjectReference Include="..\DenoHost.Core\DenoHost.Core.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'linux-arm64'">
    <ProjectReference Include="..\DenoHost.Runtime.linux-arm64\DenoHost.Runtime.linux-arm64.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'linux-x64'">
    <ProjectReference Include="..\DenoHost.Runtime.linux-x64\DenoHost.Runtime.linux-x64.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-arm64'">
    <ProjectReference Include="..\DenoHost.Runtime.osx-arm64\DenoHost.Runtime.osx-arm64.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'osx-x64'">
    <ProjectReference Include="..\DenoHost.Runtime.osx-x64\DenoHost.Runtime.osx-x64.csproj" />
  </ItemGroup>

  <ItemGroup Condition="'$(RuntimeIdentifier)' == 'win-x64'">
    <ProjectReference Include="..\DenoHost.Runtime.win-x64\DenoHost.Runtime.win-x64.csproj" />
  </ItemGroup>

  <ItemGroup>
    <Using Include="Xunit" />
  </ItemGroup>

  <ItemGroup>
    <!-- We only need build ordering, not an assembly reference -->
    <ProjectReference Include="..\DenoHost.Runtime.$(RuntimeIdentifier)\DenoHost.Runtime.$(RuntimeIdentifier).csproj"
                      ReferenceOutputAssembly="false" />
  </ItemGroup>

  <Target Name="CopyDenoFromRuntime" AfterTargets="Build">
    <PropertyGroup>
      <!-- Filename depends on target RID (not the host OS) -->
      <DenoFile Condition="$([System.String]::Copy('$(RuntimeIdentifier)').StartsWith('win'))">deno.exe</DenoFile>
      <DenoFile Condition="'$(DenoFile)' == ''">deno</DenoFile>

      <!-- Base paths -->
      <Rid>$(RuntimeIdentifier)</Rid>
      <RuntimeProjectDir>$(MSBuildThisFileDirectory)..\DenoHost.Runtime.$(Rid)</RuntimeProjectDir>
      <RuntimeOutBase>$(RuntimeProjectDir)\bin\$(Configuration)\netstandard2.1</RuntimeOutBase>

      <!-- Candidates: with and without RID subfolder -->
      <RuntimeOutWithRid>$(RuntimeOutBase)\$(Rid)\runtimes\$(Rid)\native</RuntimeOutWithRid>
      <RuntimeOutNoRid>$(RuntimeOutBase)\runtimes\$(Rid)\native</RuntimeOutNoRid>

      <SourceA>$(RuntimeOutWithRid)\$(DenoFile)</SourceA>
      <SourceB>$(RuntimeOutNoRid)\$(DenoFile)</SourceB>

      <!-- Pick the first existing source -->
      <ChosenSource Condition="Exists('$(SourceA)')">$(SourceA)</ChosenSource>
      <ChosenSource Condition="'$(ChosenSource)'=='' and Exists('$(SourceB)')">$(SourceB)</ChosenSource>

      <!-- Destination in the test project's output -->
      <TargetRuntimeDir>$(TargetDir)runtimes\$(Rid)\native\</TargetRuntimeDir>
      <TargetDest>$(TargetRuntimeDir)$(DenoFile)</TargetDest>
    </PropertyGroup>

    <Message Importance="high" Text="Try A: $(SourceA)" />
    <Message Importance="high" Text="Try B: $(SourceB)" />
    <Message Importance="high" Text="Chosen: $(ChosenSource)" />
    <Message Importance="high" Text="Copy to: $(TargetDest)" />
    <Message Importance="high" Text="Configuration: $(Configuration) | RID=$(Rid)" />

    <!-- Fail fast if neither source exists -->
    <Error Condition="'$(ChosenSource)'==''"
          Text="Runtime source not found (tried both): $(SourceA) and $(SourceB). Check runtime project copy target." />

    <MakeDir Directories="$(TargetRuntimeDir)" />
    <Copy SourceFiles="$(ChosenSource)"
          DestinationFiles="$(TargetDest)"
          SkipUnchangedFiles="true" />
  </Target>

</Project>
