name: Build and Publish NuGet Package

on:
  push:
    branches: [main]
    tags: ['v*'] # e.g. v1.45.0
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Extract version from tag
        id: extract_version
        shell: bash
        run: |
            echo "TAG: $GITHUB_REF"
            VERSION="${GITHUB_REF#refs/tags/v}"
            echo "NuGet Version: $VERSION"
            echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Download Deno for Windows (win-x64)
        shell: bash
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          mkdir -p runtimes/win-x64/native
          curl --fail --retry 3 -L -o deno-win.zip "https://github.com/denoland/deno/releases/download/v$VERSION/deno-x86_64-pc-windows-msvc.zip"
          unzip -q deno-win.zip -d runtimes/win-x64/native
          find runtimes/win-x64/native -maxdepth 1 -type f -name "deno*" -exec mv {} runtimes/win-x64/native/deno.exe \;
          chmod +x runtimes/win-x64/native/deno.exe
          rm deno-win.zip

      - name: Download Deno for Linux (linux-x64)
        shell: bash
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          mkdir -p runtimes/linux-x64/native
          curl --fail --retry 3 -L -o deno-linux.zip "https://github.com/denoland/deno/releases/download/v$VERSION/deno-x86_64-unknown-linux-gnu.zip"
          unzip -q deno-linux.zip -d runtimes/linux-x64/native
          find runtimes/linux-x64/native -maxdepth 1 -type f -name "deno*" -exec mv {} runtimes/linux-x64/native/deno \;
          chmod +x runtimes/linux-x64/native/deno
          rm deno-linux.zip
         
      - name: Download Deno for Linux (linux-arm64)
        shell: bash
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          mkdir -p runtimes/linux-arm64/native
          curl --fail --retry 3 -L -o deno-linux.zip "https://github.com/denoland/deno/releases/download/v$VERSION/deno-aarch64-unknown-linux-gnu.zip"
          unzip -q deno-linux.zip -d runtimes/linux-arm64/native
          find runtimes/linux-arm64/native -maxdepth 1 -type f -name "deno*" -exec mv {} runtimes/linux-arm64/native/deno \;
          chmod +x runtimes/linux-arm64/native/deno
          rm deno-linux.zip

      - name: Download Deno for macOS (osx-x64)
        shell: bash
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          mkdir -p runtimes/osx-x64/native
          curl --fail --retry 3 -L -o deno-macos-x64.zip "https://github.com/denoland/deno/releases/download/v$VERSION/deno-x86_64-apple-darwin.zip"
          unzip -q deno-macos-x64.zip -d runtimes/osx-x64/native
          find runtimes/osx-x64/native -maxdepth 1 -type f -name "deno*" -exec mv {} runtimes/osx-x64/native/deno \;
          chmod +x runtimes/osx-x64/native/deno
          rm deno-macos-x64.zip

      - name: Download Deno for macOS (osx-arm64)
        shell: bash
        run: |
          VERSION=${{ steps.extract_version.outputs.version }}
          mkdir -p runtimes/osx-arm64/native
          curl --fail --retry 3 -L -o deno-macos-arm64.zip "https://github.com/denoland/deno/releases/download/v$VERSION/deno-aarch64-apple-darwin.zip"
          unzip -q deno-macos-arm64.zip -d runtimes/osx-arm64/native
          find runtimes/osx-arm64/native -maxdepth 1 -type f -name "deno*" -exec mv {} runtimes/osx-arm64/native/deno \;
          chmod +x runtimes/osx-arm64/native/deno
          rm deno-macos-arm64.zip

      - name: Run tests
        run: dotnet test DenoWrapper.Tests/DenoWrapper.Tests.csproj --configuration Release --no-restore --verbosity normal

      - name: Pack with version
        run: dotnet pack DenoWrapper/DenoWrapper.csproj -c Release -p:Version=${{ steps.extract_version.outputs.version }} --include-symbols --include-source -o ./nupkg

      - name: Show generated packages
        run: ls -lh ./nupkg

      - name: Publish to NuGet
        if: startsWith(github.ref, 'refs/tags/')
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
        run: dotnet nuget push ./nupkg/*.nupkg --api-key "$NUGET_API_KEY" --source https://api.nuget.org/v3/index.json
