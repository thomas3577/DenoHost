name: Build and Publish NuGet Package

permissions:
  contents: write
  packages: write

on:
  push:
    tags: ["v*"]
  workflow_dispatch:

jobs:
  get-version:
    name: Determine Deno Version
    runs-on: ubuntu-latest
    outputs:
      package_version: ${{ steps.extract.outputs.package_version }}
      deno_version: ${{ steps.extract.outputs.deno_version }}
      tag_name: ${{ steps.extract.outputs.tag_name }}
      is_prerelease: ${{ steps.extract.outputs.is_prerelease }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Extract Version
        id: extract
        run: |
          # Single source of truth: Directory.Build.props
          DENO_VERSION=$(grep '<DenoVersion>' Directory.Build.props | sed -E 's:.*<DenoVersion>(.*)</DenoVersion>.*:\1:')

          # Extract version from tag
          TAG_NAME="${GITHUB_REF#refs/tags/}"
          PACKAGE_VERSION="${TAG_NAME#v}"

          # Check if this is a prerelease based on tag name
          IS_PRERELEASE="false"
          if [[ "$TAG_NAME" =~ -(alpha|beta|rc|preview)\. ]]; then
            IS_PRERELEASE="true"
            echo "Detected prerelease tag: $TAG_NAME"
          fi

          echo "package_version=$PACKAGE_VERSION" >> $GITHUB_OUTPUT
          echo "deno_version=$DENO_VERSION" >> $GITHUB_OUTPUT
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "##[notice]NuGet version: $PACKAGE_VERSION"
          echo "##[notice]Deno version: $DENO_VERSION"
          echo "##[notice]Tag name: $TAG_NAME"
          echo "##[notice]Is prerelease: $IS_PRERELEASE"

  build-runtime:
    name: Build Runtime Packages
    needs: get-version
    strategy:
      matrix:
        include:
          - rid: win-x64
            proj: DenoHost.Runtime.win-x64/DenoHost.Runtime.win-x64.csproj
            os: windows-latest
          - rid: linux-x64
            proj: DenoHost.Runtime.linux-x64/DenoHost.Runtime.linux-x64.csproj
            os: ubuntu-latest
          - rid: linux-arm64
            proj: DenoHost.Runtime.linux-arm64/DenoHost.Runtime.linux-arm64.csproj
            os: ubuntu-latest
          - rid: osx-x64
            proj: DenoHost.Runtime.osx-x64/DenoHost.Runtime.osx-x64.csproj
            os: ubuntu-latest
          - rid: osx-arm64
            proj: DenoHost.Runtime.osx-arm64/DenoHost.Runtime.osx-arm64.csproj
            os: ubuntu-latest

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Make shell script executable
        shell: bash
        run: chmod +x tools/download-deno.sh

      - name: Pack Runtime Package
        shell: bash
        run: |
          VERSION=${{ needs.get-version.outputs.package_version }}
          dotnet pack ${{ matrix.proj }} -c Release -p:Version=$VERSION --output ./nupkg/runtime/${{ matrix.rid }}

      - name: Upload Runtime Package
        uses: actions/upload-artifact@v5
        with:
          name: DenoHost.Runtime.${{ matrix.rid }}.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/runtime/${{ matrix.rid }}/*.nupkg
          retention-days: 7

  build-core:
    name: Build Core Package
    needs: [get-version, build-runtime]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - name: Set up .NET
        uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Display .NET Info
        run: dotnet --info

      - name: Check for Vulnerable Packages
        run: dotnet list package --vulnerable || true

      - name: Build Solution
        run: dotnet build DenoHost.sln -c Release

      - name: Pack Core Project
        run: |
          VERSION=${{ needs.get-version.outputs.package_version }}
          dotnet pack DenoHost.Core/DenoHost.Core.csproj -c Release -p:Version=$VERSION --output ./nupkg/core

      - name: Upload Core Package as Artifact
        uses: actions/upload-artifact@v5
        with:
          name: DenoHost.Core.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/core/*.nupkg
          retention-days: 7

  test-on-windows:
    name: Run Tests on windows
    needs: [build-core, build-runtime]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Build Test Project (Release, win-x64)
        run: dotnet build DenoHost.Tests/DenoHost.Tests.csproj -c Release -r win-x64

      - name: Check deno.exe exists
        shell: bash
        run: test -f DenoHost.Tests/bin/Release/net9.0/win-x64/runtimes/win-x64/native/deno.exe

      - name: Run Unit Tests with Coverage
        run: dotnet test DenoHost.Tests/DenoHost.Tests.csproj -c Release -r win-x64 --no-build --collect:"XPlat Code Coverage" --results-directory ./coverage

      - name: Install ReportGenerator
        run: dotnet tool install -g dotnet-reportgenerator-globaltool

      - name: Generate Coverage Report
        run: reportgenerator -reports:"coverage/**/coverage.cobertura.xml" -targetdir:"coverage-report" -reporttypes:"Cobertura;Badges"

      - name: Upload Coverage Reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ./coverage-report/Cobertura.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  test-on-linux:
    name: Run Tests on linux
    needs: [build-core, build-runtime]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5

      - uses: actions/setup-dotnet@v5
        with:
          dotnet-version: |
            8.0.x
            9.0.x

      - name: Build Test Project (Release, linux-x64)
        run: dotnet build DenoHost.Tests/DenoHost.Tests.csproj -c Release -r linux-x64

      - name: Check deno exists
        shell: bash
        run: test -f DenoHost.Tests/bin/Release/net9.0/linux-x64/runtimes/linux-x64/native/deno

      - name: Run Unit Tests
        run: dotnet test DenoHost.Tests/DenoHost.Tests.csproj -c Release -r linux-x64 --no-build

  publish-runtime:
    name: Publish Runtime NuGet
    needs: [get-version, build-runtime, test-on-linux, test-on-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    strategy:
      matrix:
        rid: [win-x64, linux-x64, linux-arm64, osx-x64, osx-arm64]
    runs-on: ubuntu-latest

    steps:
      - name: Download Runtime Artifact
        uses: actions/download-artifact@v6
        with:
          name: DenoHost.Runtime.${{ matrix.rid }}.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/runtime/${{ matrix.rid }}

      - name: Push Runtime Package to NuGet
        run: dotnet nuget push ./nupkg/runtime/${{ matrix.rid }}/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Push Runtime Package to GitHub Packages
        run: dotnet nuget push ./nupkg/runtime/${{ matrix.rid }}/*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

  publish-core:
    name: Publish Core NuGet
    needs: [get-version, build-core, test-on-linux, test-on-windows]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v6
        with:
          name: DenoHost.Core.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/core

      - name: Push Core Package to NuGet
        run: dotnet nuget push ./nupkg/core/*.nupkg --source https://api.nuget.org/v3/index.json --api-key ${{ secrets.NUGET_API_KEY }}

      - name: Push Core Package to GitHub Packages
        run: dotnet nuget push ./nupkg/core/*.nupkg --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --api-key ${{ secrets.GITHUB_TOKEN }}

  create-release:
    name: Create GitHub Release
    needs: [get-version, publish-runtime, publish-core]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      # Download all artifacts to attach to release
      - name: Download Core Package
        uses: actions/download-artifact@v6
        with:
          name: DenoHost.Core.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/core

      - name: Download Runtime Packages
        uses: actions/download-artifact@v6
        with:
          pattern: DenoHost.Runtime.*.${{ needs.get-version.outputs.package_version }}
          path: ./nupkg/runtime
          merge-multiple: true

      - name: Create GitHub Release with Auto-Generated Notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.get-version.outputs.tag_name }}
          name: ${{ needs.get-version.outputs.tag_name }}
          prerelease: ${{ needs.get-version.outputs.is_prerelease == 'true' }}
          generate_release_notes: true
          files: |
            ./nupkg/core/*.nupkg
            ./nupkg/runtime/**/*.nupkg
